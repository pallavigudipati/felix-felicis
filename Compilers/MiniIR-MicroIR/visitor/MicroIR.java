//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class MicroIR<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      String nodeList = new String();
      nodeList = "";
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         String part = (String)e.nextElement().accept(this);
         _count++;
         nodeList += part;
      }
      return (R)nodeList;
      //return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         String nodeList = new String();
         nodeList = "";
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            String part = (String)e.nextElement().accept(this);
            _count++;
            nodeList += part + "@";
         }
         return (R)nodeList;
         //return _ret;
      }
      else
    	  return (R)("");
         //return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() ) {
    	  String node = (String)n.node.accept(this);
    	  return (R)node;
      } else {
    	  return (R)("");
      }
    	  //return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      String nodeSeq = new String();
      nodeSeq = "";
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         String part = (String)e.nextElement().accept(this);
         _count++;
         nodeSeq += part;
      }
      return (R)nodeSeq;
      //return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //
   
   private int tempIter = 1000;
   
   String getTemp() {
	   String temp = new String();
	   temp = "TEMP " + tempIter;
	   tempIter++;
	   return temp;
   }
   private boolean procFlag = false;
   private boolean labelFlag = false;
   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
	  R _ret=null;
      n.f0.accept(this);
      System.out.println("MAIN\n");
      n.f1.accept(this);
      n.f2.accept(this);
      System.out.println("END");
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      if (n.f0.present()) {
          int _count=0;
          for ( Enumeration<Node> e = n.f0.elements(); e.hasMoreElements(); ) {
        	  labelFlag =true;
        	  e.nextElement().accept(this);
             _count++;
          }
          return _ret;
       } else {
          return null;
       }
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      String label = (String)n.f0.accept(this);
      n.f1.accept(this);
      String intLit = (String)n.f2.accept(this);
      n.f3.accept(this);
      String proc = new String();
      proc = label + " [" + intLit + "]\n";
	  //System.err.println("1");
      System.out.println(proc);
      procFlag = true;
      n.f4.accept(this);

      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      labelFlag = false;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
	  //System.err.println("2");
      System.out.println("NOOP\n");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
	  //System.err.println("3");
      System.out.println("ERROR\n");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp() (// TEMP)
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      
      String exp = (String)n.f1.accept(this);
      String label = (String)n.f2.accept(this);
      String temp = getTemp(); 
      String cjump = new String();
      cjump = "MOVE " + temp + " " + exp + "\n";
      cjump += "CJUMP " + temp + " " + label + "\n";
	  //System.err.println("4");
      System.out.println(cjump);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String label = (String)n.f1.accept(this);
	  //System.err.println("5");
      System.out.println("JUMP " + label + "\n");
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp() // TEMP
    * f2 -> IntegerLiteral()
    * f3 -> Exp()  // TEMP
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      
      String exp1 = (String)n.f1.accept(this);
      String intLit = (String)n.f2.accept(this);
      String exp2 = (String)n.f3.accept(this);
      String hstore = new String();
      String temp1 = getTemp();
      String temp2 = getTemp();
      hstore = "MOVE " + temp1 + " " + exp1 + "\n";
      hstore += "MOVE " + temp2 + " " + exp2 + "\n";
      //TODO move all the exp in stms to temps and then use
      hstore += "HSTORE " + temp1 + " " + intLit + " " + temp2 + "\n";
	  //System.err.println("6");
      System.out.println(hstore);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp() 
    * f2 -> Exp() //TEMP
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String temp1 = (String)n.f1.accept(this);
      String exp = (String)n.f2.accept(this);
      String intLit = (String)n.f3.accept(this);
      String hload = new String();
      String temp2 = getTemp();
      hload = "MOVE " + temp2 + " " + exp + "\n";
      hload += "HLOAD " + temp1 + " " + temp2 + " " + intLit + "\n";
	  //System.err.println("7");
      System.out.println(hload);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String temp = (String)n.f1.accept(this);
      String exp = (String)n.f2.accept(this);
	  //System.err.println("8");
      System.out.println("MOVE " + temp + " " + exp + "\n");
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp() //SimpleExp
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String exp = (String)n.f1.accept(this);
      String temp = getTemp();
      String print = new String();
      print = "MOVE " + temp + " " + exp + "\n";
      print += "PRINT " + temp + "\n";
	  //System.err.println("9");
      System.out.println(print);
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp() // SimpleExp
    *       | IntegerLiteral() // SimpleExp  
    *       | Label() // SimpleExp
    */
   public R visit(Exp n) {
      R _ret=null;
      String exp = (String)n.f0.accept(this);
      return (R)exp;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp() //SimpleExp
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      boolean flag = procFlag;
      procFlag = false;
      if (flag) {
    	  n.f0.accept(this);
    	  //System.err.println("11");
    	  System.out.println("BEGIN\n");
    	  n.f1.accept(this);
    	  n.f2.accept(this);
    	  String temp = getTemp();
    	  String exp = (String)n.f3.accept(this);
    	  //System.err.println("12");
    	  System.out.println("MOVE " + temp + " " + exp + "\n");
    	  n.f4.accept(this);
    	  //System.err.println("13");
    	  System.out.println("RETURN " + temp + "\nEND\n");
    	  return _ret;
      } else {
    	  n.f0.accept(this);
    	  n.f1.accept(this);
    	  n.f2.accept(this);
    	  String exp = (String)n.f3.accept(this);
    	  n.f4.accept(this);
    	  String temp = getTemp();
    	  //System.err.println("15");
    	  System.out.println("MOVE " + temp + " " + exp + "\n");
    	  return (R)(temp);
      }
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp() //SimpleExp
    * f2 -> "("
    * f3 -> ( Exp() )* //Temp
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      n.f0.accept(this);
      String exp1 = (String)n.f1.accept(this);
      n.f2.accept(this);
      String expList = (String)n.f3.accept(this);
      n.f4.accept(this);
      
      String call = new String();
      String temp1 = getTemp();
      call = "MOVE " + temp1 + " " + exp1 + "\n";
	  //System.err.println("16");
      System.out.println(call);
      String args = new String();
      args = "";
      String[] exp2s = expList.split("@");
      for (int i = 0; i < exp2s.length; ++i) {
    	  String temp = getTemp();
    	  args += temp + " ";
    	  call = "MOVE " + temp + " " + exp2s[i] + "\n";
    	  //System.err.println("17");
    	  System.out.println(call);
      }
      call = "CALL " + temp1 + " (" + args + ")\n";
      return (R)call;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp() //SimpleExp
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      
      String exp = (String)n.f1.accept(this);
      String hallocate = new String();
      String temp = getTemp();
      hallocate = "MOVE " + temp + " " + exp + "\n";
	  //System.err.println("18");
      System.out.println(hallocate);
      hallocate = "HALLOCATE " + temp + "\n";
      return (R)hallocate;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp() // Temp
    * f2 -> Exp() // SimpleExp
    */
   public R visit(BinOp n) {
      R _ret=null;
      
      String op = (String)n.f0.accept(this);
      String exp1 = (String)n.f1.accept(this);
      String exp2 = (String)n.f2.accept(this);
      String binOp = new String();
      String temp1 = getTemp();
      String temp2 = getTemp();
      binOp = "MOVE " + temp1 + " " + exp1 + "\n";
      binOp += "MOVE " + temp2 + " " + exp2 + "\n";
	  //System.err.println("19");
      System.out.println(binOp);
      binOp = op + " " + temp1 + " " + temp2 + "\n";
      return (R)binOp;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      String op = new String();
      int choice = n.f0.which;
      switch (choice) {
      	case 0: op = "LT"; break; 
      	case 1: op = "PLUS"; break; 
      	case 2: op = "MINUS"; break; 
      	case 3: op = "TIMES"; break; 
      } 
      return (R)op;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
      R _ret=null;
      n.f0.accept(this);
      
      String intLit = (String)n.f1.accept(this);
      return (R)("TEMP " + intLit);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      
      Integer intLit = Integer.parseInt(n.f0.tokenImage);
      return (R)Integer.toString(intLit);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      n.f0.accept(this);
      if (labelFlag) {
    	  //System.err.println("20");
    	  System.out.println(n.f0.toString());
    	  return _ret;
      }
      return (R)n.f0.toString();
   }

}
